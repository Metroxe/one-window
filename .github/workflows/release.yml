name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.2.3, etc.
  workflow_dispatch:  # Allows manual trigger from GitHub Actions tab
    inputs:
      version:
        description: 'Version number (e.g., 1.0.1)'
        required: true
        default: '1.0.1'

jobs:
  build:
    runs-on: macos-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
      
      - name: Update version in project
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Update MARKETING_VERSION (user-facing version like 1.0.1)
          /usr/libexec/PlistBuddy -c "Set :objects:9CA9F8972E93380700F6C61B:buildSettings:MARKETING_VERSION $VERSION" one-window.xcodeproj/project.pbxproj
          /usr/libexec/PlistBuddy -c "Set :objects:9CA9F8962E93380700F6C61B:buildSettings:MARKETING_VERSION $VERSION" one-window.xcodeproj/project.pbxproj
          
          # Update CURRENT_PROJECT_VERSION (build number)
          BUILD_NUMBER="${GITHUB_RUN_NUMBER:-1}"
          /usr/libexec/PlistBuddy -c "Set :objects:9CA9F8972E93380700F6C61B:buildSettings:CURRENT_PROJECT_VERSION $BUILD_NUMBER" one-window.xcodeproj/project.pbxproj
          /usr/libexec/PlistBuddy -c "Set :objects:9CA9F8962E93380700F6C61B:buildSettings:CURRENT_PROJECT_VERSION $BUILD_NUMBER" one-window.xcodeproj/project.pbxproj
          
          echo "Updated to version $VERSION (build $BUILD_NUMBER)"
      
      - name: Commit version changes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          BUILD_NUMBER="${GITHUB_RUN_NUMBER:-1}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add one-window.xcodeproj/project.pbxproj
          git commit -m "Bump version to $VERSION (build $BUILD_NUMBER)"
          git push origin HEAD:main
      
      - name: Build app
        run: |
          xcodebuild clean archive \
            -project one-window.xcodeproj \
            -scheme one-window \
            -configuration Release \
            -archivePath ./build/one-window.xcarchive \
            CODE_SIGN_IDENTITY="-" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            DEVELOPMENT_TEAM=""
      
      - name: Export app
        run: |
          # Create export options plist
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>mac-application</string>
              <key>signingStyle</key>
              <string>manual</string>
          </dict>
          </plist>
          EOF
          
          # Export the archive
          xcodebuild -exportArchive \
            -archivePath ./build/one-window.xcarchive \
            -exportPath ./build/export \
            -exportOptionsPlist ExportOptions.plist
      
      - name: Create DMG
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Create a temporary directory for DMG contents
          mkdir -p dmg_temp
          cp -R ./build/export/one-window.app dmg_temp/
          
          # Create Applications symlink
          ln -s /Applications dmg_temp/Applications
          
          # Create DMG
          hdiutil create -volname "One Window" \
            -srcfolder dmg_temp \
            -ov -format UDZO \
            "one-window-$VERSION.dmg"
          
          # Cleanup
          rm -rf dmg_temp
          
          echo "Created one-window-$VERSION.dmg"
      
      - name: Create ZIP (alternative to DMG)
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          cd ./build/export
          zip -r "../../one-window-$VERSION.zip" one-window.app
          cd ../..
          echo "Created one-window-$VERSION.zip"
      
      - name: Generate SHA256 checksums
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          shasum -a 256 "one-window-$VERSION.dmg" > "one-window-$VERSION.dmg.sha256"
          shasum -a 256 "one-window-$VERSION.zip" > "one-window-$VERSION.zip.sha256"
          cat *.sha256
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: One Window v${{ steps.version.outputs.version }}
          body: |
            ## One Window v${{ steps.version.outputs.version }}
            
            A macOS menu bar app that keeps Google Chrome to a maximum of n windows.
            
            ### Installation
            
            **Download either the DMG or ZIP file below:**
            
            - **DMG**: Mount the DMG and drag One Window to your Applications folder
            - **ZIP**: Extract and move One Window to your Applications folder
            
            **Important:** Since this app is not notarized by Apple, you'll need to allow it to run:
            1. Right-click the app and select "Open" (don't double-click)
            2. Click "Open" in the dialog that appears
            3. Or: Go to System Settings > Privacy & Security and click "Open Anyway"
          files: |
            one-window-${{ steps.version.outputs.version }}.dmg
            one-window-${{ steps.version.outputs.version }}.dmg.sha256
            one-window-${{ steps.version.outputs.version }}.zip
            one-window-${{ steps.version.outputs.version }}.zip.sha256
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

